{"ast":null,"code":"import React from \"react\";\nimport { NativeBaseProvider, Center, HStack, Button, Text, Switch } from \"native-base\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar SET_COUNTER = 'SET_COUNTER';\nvar TOGGLE_COLOR_MODE = 'TOGGLE_COLOR_MODE';\n\nvar setCounter = function setCounter(counter) {\n  return function (dispatch) {\n    dispatch({\n      type: SET_COUNTER,\n      payload: counter\n    });\n  };\n};\n\nvar toggleColorMode = function toggleColorMode() {\n  return function (dispatch) {\n    dispatch({\n      type: TOGGLE_COLOR_MODE\n    });\n  };\n};\n\nvar initialCounter = {\n  counter: 0\n};\nvar initialColorMode = {\n  colorMode: \"light\"\n};\n\nvar counterReducer = function counterReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialCounter;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_COUNTER:\n      return {\n        counter: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nvar colorModeReducer = function colorModeReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialColorMode;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case TOGGLE_COLOR_MODE:\n      var colorMode = state.colorMode == 'light' ? 'dark' : 'light';\n      return {\n        colorMode: colorMode\n      };\n\n    default:\n      return state;\n  }\n};\n\nvar reducer = combineReducers({\n  counter: counterReducer,\n  colorMode: colorModeReducer\n});\nvar store = createStore(reducer, applyMiddleware(thunk));\n\nvar Screen = function Screen() {\n  var _useSelector = useSelector(function (state) {\n    return state.counter;\n  }),\n      counter = _useSelector.counter;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.colorMode;\n  }),\n      colorMode = _useSelector2.colorMode;\n\n  var dispatch = useDispatch();\n  return _jsx(NativeBaseProvider, {\n    children: _jsxs(Center, {\n      flex: 1,\n      bg: colorMode == \"light\" ? \"white\" : \"black\",\n      children: [_jsxs(HStack, {\n        space: 20,\n        children: [_jsx(Button, {\n          borderRadius: 0,\n          width: 70,\n          onPress: function onPress() {\n            return dispatch(setCounter(counter + 1));\n          },\n          children: _jsx(Text, {\n            fontSize: 40,\n            color: colorMode == \"light\" ? \"white\" : \"black\",\n            children: \"+\"\n          })\n        }), _jsx(Button, {\n          borderRadius: 0,\n          width: 70,\n          onPress: function onPress() {\n            return dispatch(setCounter(counter - 1));\n          },\n          children: _jsx(Text, {\n            fontSize: 40,\n            color: colorMode == \"light\" ? \"white\" : \"black\",\n            children: \"-\"\n          })\n        })]\n      }), _jsx(Text, {\n        fontSize: 40,\n        mt: 20,\n        color: colorMode == \"dark\" ? \"white\" : \"black\",\n        children: counter\n      }), _jsxs(HStack, {\n        mt: 20,\n        space: 8,\n        alignItems: \"center\",\n        children: [_jsx(Text, {\n          fontSize: \"lg\",\n          color: colorMode == \"dark\" ? \"white\" : \"black\",\n          children: colorMode == \"light\" ? \"Light Mode\" : \"Dark Mode\"\n        }), _jsx(Switch, {\n          name: \"light Mode\",\n          isChecked: colorMode === \"light\",\n          onToggle: function onToggle() {\n            return dispatch(toggleColorMode());\n          },\n          accessibilityLabel: \"display-mode\",\n          accessibilityHint: \"light or dark mode\"\n        })]\n      })]\n    })\n  });\n};\n\nvar App = function App() {\n  return _jsx(Provider, {\n    store: store,\n    children: _jsx(Screen, {})\n  });\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/fangyan/Documents/110-2/行動程式設計/作業/wk10_hw/App.js"],"names":["React","NativeBaseProvider","Center","HStack","Button","Text","Switch","Provider","createStore","applyMiddleware","combineReducers","useDispatch","useSelector","thunk","SET_COUNTER","TOGGLE_COLOR_MODE","setCounter","counter","dispatch","type","payload","toggleColorMode","initialCounter","initialColorMode","colorMode","counterReducer","state","action","colorModeReducer","reducer","store","Screen","App"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { NativeBaseProvider, Center, HStack, Button, Text, Switch } from \"native-base\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport thunk from \"redux-thunk\";\n\n// Part1: Defint Action Type Constant\nconst SET_COUNTER = 'SET_COUNTER';\nconst TOGGLE_COLOR_MODE = 'TOGGLE_COLOR_MODE';\n\n// Part2: Define Actions\nconst setCounter = (counter) => (dispatch) => {\n  dispatch({\n    type: SET_COUNTER,\n    payload: counter,\n  });\n};\n\nconst toggleColorMode = () => (dispatch) => {\n  dispatch({\n    type: TOGGLE_COLOR_MODE,\n  });\n};\n\n\n// Part3: Define Reducers\nconst initialCounter = { counter: 0 };\nconst initialColorMode = { colorMode: \"light\" };\n\nconst counterReducer = (state = initialCounter, action) => {\n  switch (action.type) {\n\n    case SET_COUNTER:\n      return { counter: action.payload };\n\n    default:\n      return state;\n  }\n}\n\nconst colorModeReducer = (state = initialColorMode, action) => {\n  switch (action.type) {\n\n    case TOGGLE_COLOR_MODE:\n      const colorMode = \n        (state.colorMode == 'light')\n        ? 'dark'\n        : 'light';\n      return { colorMode };\n\n    default:\n      return state;\n  }\n}\n\n// Part4: Combine Reducers and Create a Store\nconst reducer = combineReducers({\n  counter: counterReducer,\n  colorMode: colorModeReducer,\n});\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(thunk)\n);\n\n\n// Then, you can use the redux state management by\n// get states by useSelector\n// send actions by useDispatch\nconst Screen = () => {\n  // Get states from store\n  const { counter } = useSelector((state) => state.counter);\n  const { colorMode } = useSelector((state) => state.colorMode);\n\n  // Define a dispatch to send actions\n  const dispatch = useDispatch();\n\n  return (\n    <NativeBaseProvider>\n      <Center flex={1} bg={colorMode == \"light\" ? \"white\" : \"black\"}>\n        <HStack space={20}>\n          <Button borderRadius={0} width={70} onPress={() => dispatch(setCounter(counter + 1))}>\n            <Text fontSize={40} color={colorMode == \"light\" ? \"white\" : \"black\"}>+</Text>\n          </Button>\n          <Button borderRadius={0} width={70} onPress={() => dispatch(setCounter(counter - 1))}>\n            <Text fontSize={40} color={colorMode == \"light\" ? \"white\" : \"black\"}>-</Text>\n          </Button>\n        </HStack>\n        <Text fontSize={40} mt={20} color={colorMode == \"dark\" ? \"white\" : \"black\"}>\n          {counter}\n        </Text>\n        <HStack mt={20} space={8} alignItems=\"center\" >\n          <Text fontSize=\"lg\" color={colorMode == \"dark\" ? \"white\" : \"black\"}>\n            {colorMode == \"light\" ? \"Light Mode\" : \"Dark Mode\"}\n          </Text>\n          <Switch\n            name=\"light Mode\"\n            isChecked={colorMode === \"light\"}\n            onToggle={() => dispatch(toggleColorMode())}\n            accessibilityLabel=\"display-mode\"\n            accessibilityHint=\"light or dark mode\"\n          />\n        </HStack>\n      </Center>\n    </NativeBaseProvider>\n  );\n}\n\n// Wrap whole screen in a provider\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <Screen />\n    </Provider>\n  );\n};\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}